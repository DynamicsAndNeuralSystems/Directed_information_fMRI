) %>%
unnest(tidied)
View(spearman_p_results)
View(spearman_p_results)
spearman_p_results <- spearman_p_results %>%  dplyr::select(-data, -test)
spearman_p_results %>%
ggplot(data=., mapping=aes(x = estimate, fill = Comopnent)) +
geom_histogram(alpha = 0.4)
spearman_p_results %>%
ggplot(data=., mapping=aes(x = estimate, fill = Component)) +
geom_histogram(alpha = 0.4)
View(spearman_p_results)
spearman_p_results %>%
ggplot(data=., mapping=aes(x = estimate, fill = Component)) +
geom_histogram(alpha = 0.4, position = "identity")
spearman_p_results %>%
ggplot(data=., mapping=aes(x = abs(estimate), fill = Component)) +
geom_histogram(alpha = 0.4, position = "identity")
library(cowplot)
theme_set(theme_cowplot())
spearman_p_results %>%
ggplot(data=., mapping=aes(x = abs(estimate), fill = Component)) +
geom_histogram(alpha = 0.3, position = "identity") +
ylab("Number of Features") +
xlab("Absolute Spearman Correlation")
spearman_p_results %>% filter(is.na(statistic))
NA_spearmans <- spearman_p_results %>% filter(is.na(statistic))
View(NA_spearmans)
hctsa_res_good %>%
group_by(hctsa_feature) %>%
filter(length(unique(value)) > 1)
hctsa_res_unique <- hctsa_res_good %>%
group_by(hctsa_feature) %>%
filter(length(unique(value)) > 1)
spearman_p_results <- hctsa_res_unique %>%
left_join(., amyloid_data) %>%
group_by(hctsa_feature, Component) %>%
nest() %>%
mutate(
test = map(data, ~ cor.test(.x$value, .$AB_centiloid,
alternative = "two.sided", method = "spearman")),
tidied = map(test, tidy)
) %>%
unnest(tidied) %>%
dplyr::select(-data, -test)
# Plot the distribution of correlation coefficient absolute values
spearman_p_results %>%
ggplot(data=., mapping=aes(x = abs(estimate), fill = Component)) +
geom_histogram(alpha = 0.3, position = "identity") +
ylab("Number of Features") +
xlab("Absolute Spearman Coefficient")
View(spearman_p_results)
spearman_NA <- spearman_p_results %>% filter(is.na(estimate))
View(spearman_NA)
spearman_p_results %>%
ggplot(data=., mapping=aes(x = abs(estimate), fill = Component)) +
geom_histogram(alpha = 0.3, position = "identity") +
ylab("Number of Features") +
xlab("Absolute Spearman Coefficient")
spearman_p_results %>%
mutate(Component = factor(Component, levels = c("cp4", "cp8", "cp12", "cp16"))) %>%
ggplot(data=., mapping=aes(x = abs(estimate), fill = Component)) +
geom_histogram(alpha = 0.3, position = "identity") +
ylab("Number of Features") +
xlab("Absolute Spearman Coefficient")
spearman_p_results %>%
filter(!is.na(estimate)) %>%
group_by(Component) %>%
mutate(p.value.adj = p.adjust(p.value, method="BH"))
spearman_p_results %>%
filter(!is.na(estimate)) %>%
group_by(Component) %>%
mutate(p.value.adj = p.adjust(p.value, method="BH")) %>%
arrange(p.value.adj)
spearman_p_results %>%
filter(!is.na(estimate), p.value < 0.05) %>%
group_by(Component) %>%
count()
hctsa_res_unique %>%
left_join(., amyloid_data) %>%
group_by(Component)
hctsa_res_unique %>%
left_join(., amyloid_data) %>%
group_by(Component) %>%
pivot_wider(id_cols = c(Sample_ID, Component),
names_from = hctsa_feature,
values_from = value)
hctsa_res_unique %>%
left_join(., amyloid_data) %>%
pivot_wider(id_cols = c(Sample_ID, Component, AB_centiloid),
names_from = hctsa_feature,
values_from = value) %>%
dplyr::select(-Sample_ID) %>%
group_by(Component)
lm.test
library(lmtest)
hctsa_res_unique %>%
left_join(., amyloid_data) %>%
pivot_wider(id_cols = c(Sample_ID, Component, AB_centiloid),
names_from = hctsa_feature,
values_from = value) %>%
dplyr::select(-Sample_ID) %>%
group_by(Component) %>%
nest() %>%
mutate(
test = map(data, ~ lm(.$AB_Centiloid ~ .)),
tidied = map(test, tidy)
) %>%
unnest(tidied) %>%
dplyr::select(-data, -test)
hctsa_res_unique %>%
left_join(., amyloid_data) %>%
pivot_wider(id_cols = c(Sample_ID, Component, AB_centiloid),
names_from = hctsa_feature,
values_from = value) %>%
dplyr::select(-Sample_ID) %>%
group_by(Component) %>%
nest() %>%
mutate(
fit = map(data, ~ lm(AB_Centiloid ~ ., data=.x)),
tidied = map(fit, tidy)
) %>%
unnest(tidied) %>%
dplyr::select(-data, -fit)
OLS_by_component_res <- hctsa_res_unique %>%
left_join(., amyloid_data) %>%
pivot_wider(id_cols = c(Sample_ID, Component, AB_centiloid),
names_from = hctsa_feature,
values_from = value) %>%
dplyr::select(-Sample_ID) %>%
group_by(Component) %>%
nest() %>%
mutate(
fit = map(data, ~ lm(AB_centiloid ~ ., data=.x)),
tidied = map(fit, tidy)
) %>%
unnest(tidied) %>%
dplyr::select(-data, -fit)
View(OLS_by_component_res)
example_OLS_data = hctsa_res_unique %>%
left_join(., amyloid_data) %>%
filter(Component == "cp12") %>%
pivot_wider(id_cols = c(AB_centiloid),
names_from = hctsa_feature,
values_from = value)
View(example_OLS_data)
lm(AB_centiloid ~ ., data=example_OLS_data)
example_OLS_data = hctsa_res_unique %>%
left_join(., amyloid_data) %>%
filter(Component == "cp12") %>%
pivot_wider(id_cols = c(Sample_ID, AB_centiloid),
names_from = hctsa_feature,
values_from = value)
lm(AB_centiloid ~ . - Sample_ID, data=example_OLS_data)
example_OLS <- lm(AB_centiloid ~ . - Sample_ID, data=example_OLS_data)
summary(example_OLS)
example_OLS_data = hctsa_res_unique %>%
left_join(., amyloid_data) %>%
filter(Component == "cp12") %>%
pivot_wider(id_cols = c(Sample_ID, AB_centiloid),
names_from = hctsa_feature,
values_from = value) %>%
dplyr::select(-Sample_ID)
example_OLS <- lm(AB_centiloid ~ ., data=example_OLS_data)
summary(example_OLS)
spearman_p_results %>%
filter(!is.na(estimate)) %>%
group_by(Component) %>%
mutate(p.value.adj = p.adjust(p.value, method="BH")) %>%
arrange(p.value.adj)
spearman_p_results %>%
filter(!is.na(estimate)) %>%
group_by(Component) %>%
mutate(p.value.adj = p.adjust(p.value, method="BH")) %>%
filter(p.value.adj < 0.05) %>%
arrange(p.value.adj)
spearman_p_results %>%
filter(!is.na(estimate), p.value < 0.05) %>%
group_by(Component) %>%
count()
spearman_p_results %>%
filter(!is.na(estimate)) %>%
group_by(Component) %>%
mutate(p.value.adj = p.adjust(p.value, method="BH")) %>%
filter(p.value.adj < 0.05) %>%
arrange(p.value.adj)
View(amyloid_data)
example_OLS <- lm(AB_centiloid ~ ., data=example_OLS_data)
summary(example_OLS)
View(spearman_p_results)
install.packages("tidyverse")
install.packages("ggseg")
install.packages(c("see", "cowplot"))
install.packages("patchwork")
devtools::install_github("LCBC-UiO/ggsegGlasser")
install.packages("devtools")
devtools::install_github("LCBC-UiO/ggsegGlasser")
devtools::install_github("johannesbjork/LaCroixColoR")
install.packages("ggalluvial")
install.packages("ggrain")
install.packages("GGally")
install.packages("ggnewscale")
install.packages("hexbin")
library(cowplot)
library(tidyverse)
library(ggseg)
library(ggsegGlasser)
library(patchwork)
library(viridis)
library(fsbrain)
library(glue)
# Set cowplot theme
theme_set(theme_cowplot())
# Define directories
subjects_dir = "~/data/fs/"
github_dir <- "~/github/MEG_functional_connectivity/"
# fsaverage surface
subject_id = 'fsaverage'
dk_atlas_dir = "~/data/fs/fsaverage/label/"
lh_dk_annot = freesurferformats::read.fs.annot(glue("{dk_atlas_dir}/lh.aparc.annot"))
dk_atlas_dir = "~/data/fs/fsaverage/label/"
lh_dk_annot = freesurferformats::read.fs.annot(glue("{dk_atlas_dir}/lh.aparc.annot"))
rh_dk_annot = freesurferformats::read.fs.annot(glue("{dk_atlas_dir}/rh.aparc.annot"))
lh_dk_parcels_of_interest <- case_when(lh_dk_annot$label_names %in% c("fusiform") ~ 1,
lh_dk_annot$label_names %in% c("pericalcarine", "lingual") ~ 2,
lh_dk_annot$label_names %in% c("superiorparietal") ~ 3,
lh_dk_annot$label_names %in% c("rostralmiddlefrontal") ~ 4,
T ~ NA_real_)
rh_dk_parcels_of_interest <- case_when(rh_dk_annot$label_names %in% c("fusiform") ~ 1,
rh_dk_annot$label_names %in% c("pericalcarine", "lingual") ~ 2,
rh_dk_annot$label_names %in% c("superiorparietal") ~ 3,
rh_dk_annot$label_names %in% c("rostralmiddlefrontal") ~ 4,
T ~ NA_real_)
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg="sulc_light",
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rglactions = list('shift_hemis_apart'=TRUE, 'no_vis'=T))
install.packages(c("correlation", "insight", "parameters", "zoo"))
schaefer_atlas_rois_on_surface <- vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_schaef_parcels_of_interest,
morph_data_rh=rh_schaef_parcels_of_interest,
bg="sulc_light",
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rglactions = list('shift_hemis_apart'=TRUE))
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg="sulc_light",
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rglactions = list('shift_hemis_apart'=TRUE, 'no_vis'=T))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg=NULL,
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rglactions = list('shift_hemis_apart'=TRUE, 'no_vis'=T))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg=NULL,
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rgloptions = list(
light = list(intensity = 0.5, position = c(0, 0, 1)),  # Modify light position if needed
material = list(ambient = 0.5, diffuse = 0.5, specular = 0.5)  # Modify material to reduce shadows
),
rglactions = list('shift_hemis_apart'=TRUE, 'no_vis'=T))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg=NULL,
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rgloptions = list(
light = list(intensity = 0.5),  # Modify light position if needed
material = list(ambient = 0.5, diffuse = 0.5, specular = 0.5)  # Modify material to reduce shadows
),
rglactions = list('shift_hemis_apart'=TRUE, 'no_vis'=T))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg=NULL,
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rgloptions = list(
light = list(intensity = 0.1),  # Modify light position if needed
material = list(ambient = 0.5, diffuse = 0.5, specular = 0.5)  # Modify material to reduce shadows
),
rglactions = list('shift_hemis_apart'=TRUE, 'no_vis'=T))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
rglo()
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg=NULL,
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rglactions = list('shift_hemis_apart'=TRUE,
'no_vis'=T,
'light_intensity' = 0.6,  # Light intensity adjustment
'ambient_light' = 0.2,    # Softer lighting
'specular' = 0.2,         # Matte effect
'shininess' = 1,          # Low shininess for matte
'light_direction' = c(1, 1, 1)))  # Direction of light))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
dk_atlas_rois_on_surface = vis.symmetric.data.on.subject(subjects_dir, vis_subject_id=subject_id,
morph_data_lh=lh_dk_parcels_of_interest,
morph_data_rh=rh_dk_parcels_of_interest,
bg=NULL,
makecmap_options = list('colFn'=viridis),
surface="inflated", draw_colorbar = T,
rglactions = list('shift_hemis_apart'=TRUE,
'no_vis'=T,
'light_intensity' = 0.2,  # Light intensity adjustment
'ambient_light' = 0.2,    # Softer lighting
'specular' = 0.2,         # Matte effect
'shininess' = 1,          # Low shininess for matte
'light_direction' = c(1, 1, 1)))  # Direction of light))
# Export the vis
export(dk_atlas_rois_on_surface, img_only = TRUE,
output_img = glue("{github_dir}/plots/DK_atlas_ROIs.png"),
rglactions = list('shift_hemis_apart'=TRUE,'no_vis'=T),
view_angles=fsbrain::get.view.angle.names(angle_set = "t9"))
install.packages("remotes")
remotes::install_github("ggseg/ggseg")
install.packages("remotes")
remotes::install_github("ggseg/ggseg", force=T)
install.packages("remotes")
library(broom)
library(circlize)
library(ComplexHeatmap)
library(cowplot)
library(dendextend)
library(FactoMineR)
library(GGally)
library(ggseg)
library(ggsegSchaefer)
library(glue)
library(grid)
library(patchwork)
library(scales)
library(see)
library(tidyverse)
aseg_data <- aseg %>% as_tibble()
View(aseg_data)
install.packages(c("curl", "datawizard", "downloader", "gert", "jsonlite", "magick", "sf"))
install.packages(c("curl", "foreign", "httr2", "jsonlite", "lme4", "markdown", "MatrixModels", "parallelly", "pkgbuild"), lib="/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
devtools::install_github("LCBC-UiO/ggsegGlasser")
devtools::install_github("LCBC-UiO/ggsegGlasser", force=T)
remotes::install_github("LCBC-UiO/ggsegGlasser", force=T)
list.files('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages')
library(glue)
pkgs_to_install <- list.files('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages')
for (pkg in pkgs_to_install) {install.packages(glue('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages/‘{pkg}), repos = NULL, type="source")}
for (pkg in pkgs_to_install) {install.packages(glue('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages/‘{pkg}), repos = NULL, type="source”})
pkgs_to_install <- list.files('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages')
for (pkg in pkgs_to_install) {
install.packages(glue('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages/{pkg}'), repos = NULL, type="source")
}
install.packages("jsonlite")
install.packages("jsonlite", lib="/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
pkgs_to_install <- list.files('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages')
pkgs_to_install
for (pkg in pkgs_to_install) {
install.packages(glue('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages/{pkg}'), repos = NULL, type="source")
}
install.packages("jsonlite")
install.packages(c("jsonlite", "stringi"), lib="/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
pkgs_to_install <- list.files('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages')
for (pkg in pkgs_to_install) {
install.packages(glue('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages/{pkg}'), repos = NULL, type="source")
}
+   install.packages(glue('/var/folders/rn/z0683sns3tz7b_k0cbf8ft8w0000gq/T//RtmpVim5jh/downloaded_packages/{pkg}'), repos = NULL, type="source")ve("../plots/hierarchy_network_properties/entorhinal_connectivity_profile.svg", width=8, height=7, units="in", dpi=300)
install.packages("rlist")
install.packages(c("foreign", "rgl"))
install.packages(c("admisc", "broom", "foreign", "nlme", "RcppArmadillo"), lib="/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
setwd("~/github/Directed_information_fMRI/data_visualization")
inter_plot <- ggplot(mapping=aes(x=Connection_Type, y=Base_Region)) +
geom_point(data=points_data_to_plot, aes(x=Connection_Type, y=Base_Region)) +
geom_line(data=inter_hemispheric_connection_lines, aes(x=Connection_Type, y=Base_Region,
group=Connection_ID,
alpha=Pearson_R, linewidth=Pearson_R,
color=Pearson_R))+
scale_x_discrete(expand=c(0.1, 0.1)) +
scale_y_discrete(limits=rev, position = "right") +
scale_color_gradient(low="gray90", high="darkred") +
theme(legend.position='none')
library(broom)
library(circlize)
library(ComplexHeatmap)
library(cowplot)
library(dendextend)
library(FactoMineR)
library(GGally)
library(ggseg)
library(glue)
library(grid)
library(patchwork)
library(see)
library(tidyverse)
library(ggraph)
library(tidygraph)
library(igraph)
theme_set(theme_cowplot())
data_path = "/Users/abry4213/data/HCP100/"
entorhinal_pearson_FC_res = read.csv('../data/test_entorhinal_out.csv')
# Load hierarchy-based DK maks
hierarchy_dk_neuromaps_res = read.csv('../data/hierarchy_dk_neuromaps_res.csv')
AHBA_PC1_based_hierarchy_order = hierarchy_dk_neuromaps_res %>%
filter(Description=='PC1 of Allen Human Brain Atlas') %>%
arrange(Value) %>%
distinct(Base_Region) %>%
pull(Base_Region)
###############################
inter_hemispheric_connection_lines <- entorhinal_pearson_FC_res %>%
filter(Connection_Type == "Inter-hemispheric") %>%
mutate(base_region_from = "entorhinal") %>%
mutate(Connection_ID = row_number()) %>%
pivot_longer(cols=c(base_region_from, base_region_to), names_to="names", values_to="Base_Region") %>%
select(-names) %>%
rename("Pearson_R" = "Mean_Pearson_FC") %>%
mutate(Base_Region = factor(Base_Region, levels=AHBA_PC1_based_hierarchy_order),
Pearson_R = abs(Pearson_R),
Connection_Type = factor(Connection_Type, levels=c("Intra-hemispheric", "Inter-hemispheric"))) %>%
group_by(Connection_ID) %>%
mutate(Connection_Type = c("Intra-hemispheric", "Inter-hemispheric"))
points_data_to_plot <- data.frame(Base_Region=rep(AHBA_PC1_based_hierarchy_order, 2),
Value = rep(0, 68),
Connection_Type = c(rep("Intra-hemispheric", 34),
rep("Inter-hemispheric", 34))) %>%
mutate(Base_Region = factor(Base_Region, levels=AHBA_PC1_based_hierarchy_order),
Connection_Type = factor(Connection_Type, levels=c("Intra-hemispheric", "Inter-hemispheric")))
inter_plot <- ggplot(mapping=aes(x=Connection_Type, y=Base_Region)) +
geom_point(data=points_data_to_plot, aes(x=Connection_Type, y=Base_Region)) +
geom_line(data=inter_hemispheric_connection_lines, aes(x=Connection_Type, y=Base_Region,
group=Connection_ID,
alpha=Pearson_R, linewidth=Pearson_R,
color=Pearson_R))+
scale_x_discrete(expand=c(0.1, 0.1)) +
scale_y_discrete(limits=rev, position = "right") +
scale_color_gradient(low="gray90", high="darkred") +
theme(legend.position='none')
# define nodes
nodes <- data.frame(node_name = rev(AHBA_PC1_based_hierarchy_order)) %>%
mutate(node_name = factor(node_name, levels = rev(AHBA_PC1_based_hierarchy_order)))
# define edges
edges <- entorhinal_pearson_FC_res %>%
filter(Connection_Type == "Intra-hemispheric") %>%
mutate(base_region_from = "entorhinal") %>%
mutate(Connection_ID = row_number()) %>%
rename("from" = "base_region_from",
"to" = "base_region_to") %>%
mutate(Mean_Pearson_FC = abs(Mean_Pearson_FC)) %>%
mutate(from = factor(from, levels=AHBA_PC1_based_hierarchy_order),
to = factor(to, levels=AHBA_PC1_based_hierarchy_order)) %>%
arrange(from, to)
# build network from nodes and edges
network <- tbl_graph(edges = edges, nodes = nodes, directed = FALSE)
# Extract layout and modify x/y coordinates
layout_data <- create_layout(network, layout = "linear")
# Swap x and y to align nodes along the y-axis
layout_data <- layout_data %>%
mutate(temp = x, x = y, y = temp) %>%  # Swap x and y
select(-temp)  # Remove temporary column
# Flip the x-axis only
layout_data$x <- -layout_data$x
# Use the modified layout in ggraph
intra_plot <- ggraph(layout_data) +
geom_edge_arc(aes(color = Mean_Pearson_FC,
width = Mean_Pearson_FC,
alpha = Mean_Pearson_FC)) +
geom_node_point() +
scale_edge_color_gradient(low="gray90", high="darkred") +
theme(legend.position='none')
wrap_plots(list(intra_plot, inter_plot), widths=c(0.3, 0.7))
install.packages("xfun")
install.packages(c("lattice", "mgcv", "xfun"), lib="/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
install.packages(c("lattice", "mgcv", "xfun"), lib = "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
